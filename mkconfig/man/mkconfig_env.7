.\"
.\" mkconfig_env.7
.\"
.\" Copyright 2011-2018 Brad Lanam  Walnut Creek CA USA
.\"
.\" brad.lanam.di_at_gmail.com
.\"
.\"
.\"  Notes on terminology:
.\"    check variable - the variable name for the check.
.\"    directive - a command from the mkconfig config file.
.\"    mkconfig config file - file where mkconfig check commands are read from
.\"       not to be confused with "config.h".
.\"    output file - file to which language units output is written
.\"    options file -
.\"    cache file -
.\"    lib file - output libraries file created by mkreqlib.sh
.\"
.\" from perl manual pages...
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\"
.TH mkconfig_env 7 "17 Jan 2013"
.SH Name
mkconfig_env \- mkconfig environment units
.\" .SH Synopsis
.SH Description
The environment units create an output file that can be used
as shell script input to set your environment.
.SH Environment Units
.TP
.B env\-main
The env\-main unit creates a shell script with the exported shell variables.
.RS
.TP
\fBsource\fP <source\-file>
.RS
The source directive will source another shell script.  This is useful to
make other variables accessible when the the created shell script is
executed.
.RE
.RE
.TP
.B env-systype
The systype environment unit determines what type, revision and
architecture of the system you are running on.
.RS
.TP
\fBsystem\fP {type|rev|arch}
.RS
The system directive with the type, rev and arch arguments will create
the _MKCONFIG_SYSTYPE, _MKCONFIG_SYSREV, and _MKCONFIG_SYSARCH
environment variables respectively.  These
correspond to the output of uname -s, uname -r and uname -m.
On AIX, the oslevel command is used to attempt to resolve the revision
of the operating system.  On MacOS X, the revision is the kernel revision and
does not correspond to the marketing version.
.RE
.RE
.TP
.B env\-cc
.br
The cc environment unit determines basic flags needed to run the
C compiler.  Since these units are interdependent on each other, they
should be configured in the order: 32bitflags, cc, using_gcc,
using_clang,
cflags, ldflags, and libs.  The CC, CFLAGS, LDFLAGS, LIBS, CFLAGS_SHARED,
and LDFLAGS_SHARED
environment variables may be set in the options file.  Any value set
in the environment will override the settings in the options file.
.RS
.TP
\fB32bitflags\fP
.RS
If used, this directive must appear before the cc, cflags, etc. commands.
It turns off use of the 'getconf' command and other 64-bit flags.
.RE
.TP
\fBcc\fP
.RS
Determines the C compiler being used (default cc).
Sets the CC environment variable.
.RE
.TP
\fBusing_gcc\fP
.RS
Sets the _MKCONFIG_USING_GCC environment variable to 'Y' if the gcc
compiler is being used.
.RE
.TP
\fBusing_clang\fP
.RS
Sets the _MKCONFIG_USING_CLANG environment variable to 'Y' if the clang
compiler is being used.
.RE
.TP
\fBcflags\fP
.RS
Sets the CFLAGS_DEBUG, CFLAGS_OPTIMIZE, CFLAGS_INCLUDE, CFLAGS_USER,
CFLAGS_COMPILER, CFLAGS_APPLICATION and CFLAGS_SYSTEM
environment variable according to the 'getconf' program
and appropriate to the operating system and compiler.
.PP
The CFLAGS_ALL environment variable can be used to override the c flags.
.RE
.TP
\fBaddcflag\fP compiler\-flag
.RS
Checks to see if \fIcompiler\-flag\fP is valid for the compiler and
if ok, adds it to the CFLAGS environment variable.
.RE
.TP
\fBfindconfig\fP config\-file
.RS
Locates the config\-file (someConfig.sh) and loads it.
.RE
.TP
\fBaddconfig\fP env\-var mkconfig\-var
.RS
After a configuration file is loaded, the environment variables contained
therein can be loaded into mkconfig variables.  Typical mkconfig variables
are: \fIcflags_include\fP, \fIldflags_lib_application\fP, etc.
.RE
.TP
\fBldflags\fP
.RS
Sets the LDFLAGS_DEBUG, LDFLAGS_OPTIMIZE, LDFLAGS_USER,
LDFLAGS_COMPILER, LDFLAGS_APPLICATION and LDFLAGS_SYSTEM
environment variables according to the 'getconf' program
and appropriate to the operating system and compiler.
.PP
The LDFLAGS_ALL environment variable can be used to override the load flags.
.RE
.TP
\fBlibs\fP
.RS
Sets the LDFLAGS_LIBS_USER, LDFLAGS_LIBS_APPLICATION and LDFLAGS_LIBS_SYSTEM
environment variable according to the 'getconf' program
and appropriate to the operating system and compiler.
.PP
The LDFLAGS_LIBS_ALL environment variable can be used to override the libraries.
.RE
.TP
\fBcflags_shared\fP
.RS
Sets the CFLAGS_SHARED environment variable for building position
independent code
as appropriate to the operating system and compiler.
.RE
.TP
\fBldflags_shared\fP
.RS
Sets the LDFLAGS_SHARED environment variable for building a shared library
as appropriate to the operating system and compiler.
.RE
.TP
\fBshareexeclinkflag\fP
.RS
Sets the LDFLAGS_EXEC_LINK environment variable for building an executable
against shared libraries
as appropriate to the operating system and compiler.
.RE
.TP
\fBsharerunpathflag\fP
.RS
Sets the LDFLAGS_RUNPATH environment variable to the
flag for setting the shared run path
as appropriate to the operating system and compiler.
.RE
.RE
.PP
.TP
.B env-dc
.br
The dc environment unit determines basic flags needed to run the
D compiler.  The D compiler may also be dependent on the C compiler,
so the env-cc unit should also be loaded and the C compiler environment
should be set up.
The DC and DFLAGS
environment variables may be set in the options file.  Any value set
in the environment will override the settings in the options file.
.RS
.TP
\fBdc\fP
.br
Determines the D compiler being used.  Sets the DC environment variable.
Due to major differences in compiler command line options, the
following environment variables are also set:
.br
DC_OPT \- Optimizer option for the compiler.
.br
DC_OF \- Option prepended to the output file (e.g. -ofoutname or -ooutname).
Must be used w/o a space due to the dmd compiler usage.
.br
DC_RELEASE \- Option for release code.
.br
DC_INLINE \- Option for inline code generation.
.br
DC_UNITTEST \- Option for unittest code generation.
.br
DC_DEBUG \- Option for debug code generation.
.br
DC_INTFC \- Option for interface file generation.
.br
DC_COV \- Option for code coverage generation.
.br
DC_LINK \- Option to prepend to linker commands.  This should be
prepended without a space.  Needed for the dmd compiler.  e.g.
${DC_LINK}-L/somepath ${DC_LINK}-lmylib
.br
.TP
\fBdflags\fP
.br
Sets the DFLAGS environment variable.
.RE
.TP
.B env-extension
.RS
.TP
\fBextension\fP {obj|exe|shlib}
.br
The obj and exe arguments correspond to the OBJ_EXT, EXE_EXT and
SHLIB_EXT
environment variables. These variables are set to the
object file extension (.o, .obj), executable file
extension (none or .exe) or the shared library extension (.so, .sl,
.a, .dll)
per the operating system and compiler.
.RE
.TP
.B env-msgfmt
.RS
.TP
\fBcmd_msgfmt\fP
.br
Sets the XMSGFMT environment variable to the path of the
msgfmt or gmsgfmt command, if any.
.RE
.SH See Also
iffe(1) autoconf(1) dist(7) mkconfig(7) mkconfig_d(7) mkconfig_c(7)
.SH Bugs
Send bug reports to: brad.lanam.di_at_gmail.com
.SH Website
http://www.gentoo.com/di/mkconfig.html
.SH Author
This program is Copyright 2011-2012 by Brad Lanam, Walnut Creek CA
.PP
Brad Lanam, Walnut Creek, CA (brad.lanam.di_at_gmail.com)
